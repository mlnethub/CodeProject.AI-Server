/* -------------------------------------------------------------------------------------------------
 * This code is based on the code from the machine-learning\TextClassificationTF sample
 * found in the https://github.com/dotnet/samples repository. The accompanying tutorial is found at 
 * https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/text-classification-tf
 * 
 * Basically, converted the Program class Program.cs file into the TextClassifier class for general
 * use.
 * ------------------------------------------------------------------------------------------------- */

using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Transforms;

using System;
using System.Collections.Generic;
using System.IO;

namespace CodeProject.AI.AnalysisLayer.SentimentAnalysis
{
    public class TextClassifier
    {
        public const int FeatureLength = 600;

        static readonly string        _modelPath = Path.Combine(Environment.CurrentDirectory, "sentiment_model");
        private readonly MLContext    _mlContext;
        private readonly ITransformer _model;

        /// <summary>
        /// Gets or sets the execution provider.
        /// </summary>
        public string ExecutionProvider { get; set; } = "CPU";

        /// <summary>
        /// Gets or sets the hardware type (CPU or GPU).
        /// </summary>
        public string HardwareType { get; set; } = "CPU";

        public TextClassifier()
        {
            // Create MLContext to be shared across the model creation workflow objects
            _mlContext = new MLContext();

            // Dictionary to encode words as integers.
            var lookupMap = _mlContext.Data.LoadFromTextFile(Path.Combine(_modelPath, "imdb_word_index.csv"),
                columns: new[]
                   {
                        new TextLoader.Column("Words", DataKind.String, 0),
                        new TextLoader.Column("Ids", DataKind.Int32, 1),
                   },
                separatorChar: ','
               );

            // The model expects the input feature vector to be a fixed length vector.
            // This action resizes the variable length array generated by the lookup map
            // to a fixed length vector. If there are less than 600 words in the sentence,
            // the remaining indices will be filled with zeros. If there are more than
            // 600 words in the sentence, then the array is truncated at 600.
            Action<VariableLength, FixedLength> ResizeFeaturesAction = (s, f) =>
            {
                var features = s.VariableLengthFeatures;
                Array.Resize(ref features, FeatureLength);
                f.Features = features;
            };

            // Load the TensorFlow model.
            TensorFlowModel tensorFlowModel = _mlContext.Model.LoadTensorFlowModel(_modelPath);

            DataViewSchema schema = tensorFlowModel.GetModelSchema();
            var featuresType = (VectorDataViewType)schema["Features"].Type;
            var predictionType = (VectorDataViewType)schema["Prediction/Softmax"].Type;

            IEstimator<ITransformer> pipeline =
                // Split the text into individual words
                _mlContext.Transforms.Text.TokenizeIntoWords("TokenizedWords", "ReviewText")

                // Map each word to an integer value. The array of integer makes up the input features.
                .Append(_mlContext.Transforms.Conversion.MapValue("VariableLengthFeatures", lookupMap,
                    lookupMap.Schema["Words"], lookupMap.Schema["Ids"], "TokenizedWords"))

                // Resize variable length vector to fixed length vector.
                .Append(_mlContext.Transforms.CustomMapping(ResizeFeaturesAction, "Resize"))

                // Passes the data to TensorFlow for scoring
                .Append(tensorFlowModel.ScoreTensorFlowModel("Prediction/Softmax", "Features"))

                // Retrieves the 'Prediction' from TensorFlow and and copies to a column
                .Append(_mlContext.Transforms.CopyColumns("Prediction", "Prediction/Softmax"));

            // Create an executable model from the estimator pipeline
            IDataView dataView = _mlContext.Data.LoadFromEnumerable(new List<MovieReview>());
            _model = pipeline.Fit(dataView);
        }

        public MovieReviewSentimentPrediction PredictSentiment(string reviewText)
        {
            var engine = _mlContext.Model.CreatePredictionEngine<MovieReview, MovieReviewSentimentPrediction>(_model);

            var review = new MovieReview()
            {
                ReviewText = reviewText
            };

            // Predict with TensorFlow pipeline.
            var sentimentPrediction = engine.Predict(review);
            return sentimentPrediction;
        }

        /// <summary>
        /// Class to hold original sentiment data.
        /// </summary>
        public class MovieReview
        {
            public string? ReviewText { get; set; }
        }

        /// <summary>
        /// Class to contain the output values from the transformation.
        /// </summary>
        public class MovieReviewSentimentPrediction
        {
            [VectorType(2)]
            public float[]? Prediction { get; set; }
        }

        /// <summary>
        /// Class to hold the variable length feature vector. Used to define the
        /// column names used as input to the custom mapping action.
        /// </summary>
        public class VariableLength
        {
            /// <summary>
            /// This is a variable length vector designated by VectorType attribute.
            /// Variable length vectors are produced by applying operations such as 'TokenizeWords' on strings
            /// resulting in vectors of tokens of variable lengths.
            /// </summary>
            [VectorType]
            public int[]? VariableLengthFeatures { get; set; }
        }

        /// <summary>
        /// Class to hold the fixed length feature vector. Used to define the
        /// column names used as output from the custom mapping action,
        /// </summary>
        public class FixedLength
        {
            /// <summary>
            /// This is a fixed length vector designated by VectorType attribute.
            /// </summary>
            [VectorType(FeatureLength)]
            public int[]? Features { get; set; }
        }
    }
}
