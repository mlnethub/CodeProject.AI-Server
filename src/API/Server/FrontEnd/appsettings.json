{
  "Logging": {
    "LogLevel": {
      "Default": "Trace",
      "Microsoft": "Error",
      "System": "Error"
    },
    "AIServer": {
      "LoggingDir": "logs", // Directory where logs are stored, relative to root
      "FileTemplate": "log-%Y-%m-%d.txt", // Template for daily logging file
      "MaxLogsToStoreMB": 20, // Maximum amount of logs to store in MB. Once this is hit old log files get dumped (not trimmed, dumped)
      "LogLevels": {
        "Debug": "Yellow",
        "Trace": "Gray",
        "Information": "White",
        "Warning": "Cyan",
        "Error": "Red",
        "Critical": "Magenta"
      }
    }
  },

  // Kestrel
  "AllowedHosts": "*",
  "ForceHttps": false,

  // Request queue settings.
  "QueueProcessingOptions": {
    "ResponseTimeout": "00:00:30",
    "CommandDequeueTimeout": "00:00:10",
    "MaxQueueLength": 1024
  },

  "ServerOptions": {

    // Allow the server to make calls to check for updates or get downloadable module lists.
    "AllowInternetAccess": true,

    // Whether or not to disable port 5000 (5500 on mac) so it's free for something else
    "DisableLegacyPort": false,

    // Checking for updates
    "ServerVersionCheckUrl": "https://www.codeproject.com/ai/version.aspx",
    "ServerDownloadUrl": "https://www.codeproject.com/ai/latest.aspx",

    // The root of the application, relative to the current application working directory. In 
    // production, the CodeProject.AI server sits in the /Server dir, so we need to go up one level
    // to get to the root path
    "ApplicationRootPath": "..",   // ** "%ROOT_PATH% will expand to the path-normalised form of this value 

    // These key/values are added to the set of environment variables when the backend analysis
    // modules are launched.
    "EnvironmentVariables": {
      "CPAI_PORT": 32168, // Port for API client to use
      "CPAI_APPROOTPATH": "%ROOT_PATH%" // Root path of server application
    }
  },

  "ModuleOptions": {

    // Will we be launching the backend analysis modules when the server starts? (handy to disable
    // for debugging the modules separately)
    "LaunchModules": true,

    // The delay between starting the server and starting the background modules in seconds. Ensures
    // the server is fully running before we attempt to launch the backend modules.
    "DelayBeforeLaunchingModulesSecs": 3,

    // The delay between stopping the background services and passing control back to the server so
    // it can stop. Ensures modules have time to stop properly.
    "DelayAfterStoppingModulesSecs": 3,

    // This needs to be set to allow module uploads and installs via the API
    "InstallPassword": null,

    // The time allowed for a module to be installed. 20 mins should be plenty, but for a Raspberry
    // or Orange Pi, or slow internet, it will need longer.
    "ModuleInstallTimeout": "00:20:00",
    
    // Location of the Json list of modules that can be downloaded
    "ModuleListUrl": "https://www.codeproject.com/ai/modules/list",

    // The location of the AI modules (pre-installed and downloaded/sideloaded)
    "RuntimesPath": "%ROOT_PATH%/runtimes",                        // ** %RUNTIMES_PATH% will expand to this value
    "PreInstalledModulesPath": "%ROOT_PATH%/preinstalled-modules", // ** %PREINSTALLED_MODULES_PATH% will expand to this value
    "ModulesPath": "%ROOT_PATH%/modules",                          // ** %MODULES_PATH% will expand to this value
    "DownloadedModulePackagesPath": "%ROOT_PATH%/downloads/modules",
    "ModuleInstallerScriptsPath": "%ROOT_PATH%",                   // Where the installer scripts (setup.bat/.sh) live

    // The template location of the Python interpreter for use when the Runtime for a module is
    // set as "Python". In Development mode, the Python folder will go under an OS specific
    // folder. This allows the same python modules to run under Windows and Linux in the same repo
    // (Handy if you run Windows and WSL against the same code). %PYTHON_RUNTIME% will be replaced 
    // by the ModuleConfig's Runtime value if the Runtime begins with "Python". (ie it would be
    // "Python38", for Python 3.8). Ultimately, Runtimes and their launcher's paths will be 
    // registered by "runtime" type modules, removing the need for this hardcoding.
    
    "PythonRelativeInterpreterPath": "/bin/%OS%/%PYTHON_RUNTIME%/venv/scripts/Python", // ** %PYTHON_PATH% will expand to this value

    // Whether or not to install the initial set of modules concurrently or one by one.
    "ConcurrentInitialInstalls": false,

    // The list of Modules to install on Initial run. Format is "moduleId", "version". 
    // Leave version blank to install the latest available.
    "InitialModules": {
      "FaceProcessing": "",
      "ObjectDetectionNet": "",
      "ObjectDetectionYolo": ""
    }
  }
}
