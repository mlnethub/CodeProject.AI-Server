/* -------------------------------------------------------------------------------------------------
 * This code is based on the code from the machine-learning\TextClassificationTF sample
 * found in the https://github.com/dotnet/samples repository. The accompanying tutorial is found at 
 * https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/text-classification-tf
 * 
 * Basically, converted the Program class Program.cs file into the TextClassifier class for general
 * use.
 * ------------------------------------------------------------------------------------------------- */

using System;
using System.Collections.Generic;
using System.IO;

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Transforms;

namespace CodeProject.AI.Modules.SentimentAnalysis
{
    public class TextClassifier
    {
        /// <summary>
        /// Class to hold original input data.
        /// </summary>
        public class InputData
        {
            public string? Text { get; set; }
        }

        /// <summary>
        /// Class to contain the output values from the transformation.
        /// </summary>
        public class SentimentPrediction
        {
            [VectorType(2)]
            public float[]? Prediction { get; set; }
        }

        /// <summary>
        /// Class to hold the variable length feature vector. Used to define the
        /// column names used as input to the custom mapping action.
        /// </summary>
        public class VariableLength
        {
            /// <summary>
            /// This is a variable length vector designated by VectorType attribute. Variable length
            /// vectors are produced by applying operations such as 'TokenizeWords' on strings
            /// resulting in vectors of tokens of variable lengths.
            /// </summary>
            [VectorType]
            public int[]? VariableLengthFeatures { get; set; }
        }

        /// <summary>
        /// Class to hold the fixed length feature vector. Used to define the
        /// column names used as output from the custom mapping action,
        /// </summary>
        public class FixedLength
        {
            /// <summary>
            /// This is a fixed length vector designated by VectorType attribute.
            /// </summary>
            [VectorType(FeatureLength)]
            public int[]? Features { get; set; }
        }


        public const int FeatureLength = 600;

        private readonly MLContext    _mlContext;
        private readonly ITransformer _model;
        private readonly ILogger<TextClassifier> _logger;

        /// <summary>
        /// Gets or sets the execution provider.
        /// </summary>
        public string ExecutionProvider { get; set; } = "CPU";

        /// <summary>
        /// Gets or sets the hardware type (CPU or GPU).
        /// </summary>
        public string HardwareType { get; set; } = "CPU";

        /// <summary>
        /// Initializes a new instance of the ObjectDetectionWorker.
        /// </summary>
        /// <param name="logger">The Logger.</param>
        /// <param name="config">The app configuration values.</param>
        public TextClassifier(ILogger<TextClassifier> logger, IConfiguration config)
        {
            _logger = logger;

            // string currentPath = Environment.CurrentDirectory; // incorrect
            string currentPath = Directory.GetCurrentDirectory();

            string modelPath = config.GetValue("MODELS_DIR", Path.Combine(currentPath, "sentiment_model")) 
                             ?? "sentiment_model";

            // Create MLContext to be shared across the model creation workflow objects
            _mlContext = new MLContext();

            // Dictionary to encode words as integers.
            var lookupMap = _mlContext.Data.LoadFromTextFile(Path.Combine(modelPath!, "imdb_word_index.csv"),
                columns: new[]
                   {
                        new TextLoader.Column("Words", DataKind.String, 0),
                        new TextLoader.Column("Ids", DataKind.Int32, 1),
                   },
                separatorChar: ','
               );

            // The model expects the input feature vector to be a fixed length vector.
            // This action resizes the variable length array generated by the lookup map
            // to a fixed length vector. If there are less than 600 words in the sentence,
            // the remaining indices will be filled with zeros. If there are more than
            // 600 words in the sentence, then the array is truncated at 600.
            Action<VariableLength, FixedLength> ResizeFeaturesAction = (s, f) =>
            {
                var features = s.VariableLengthFeatures;
                Array.Resize(ref features, FeatureLength);
                f.Features = features;
            };

            // Load the TensorFlow model.
            TensorFlowModel tensorFlowModel = _mlContext.Model.LoadTensorFlowModel(modelPath);

            DataViewSchema schema = tensorFlowModel.GetModelSchema();
            var featuresType = (VectorDataViewType)schema["Features"].Type;
            var predictionType = (VectorDataViewType)schema["Prediction/Softmax"].Type;

            IEstimator<ITransformer> pipeline =
                // Split the text into individual words
                _mlContext.Transforms.Text.TokenizeIntoWords("TokenizedWords", "Text")

                // Map each word to an integer value. The array of integer makes up the input features.
                .Append(_mlContext.Transforms.Conversion.MapValue("VariableLengthFeatures", lookupMap,
                    lookupMap.Schema["Words"], lookupMap.Schema["Ids"], "TokenizedWords"))

                // Resize variable length vector to fixed length vector.
                .Append(_mlContext.Transforms.CustomMapping(ResizeFeaturesAction, "Resize"))

                // Passes the data to TensorFlow for scoring
                .Append(tensorFlowModel.ScoreTensorFlowModel("Prediction/Softmax", "Features"))

                // Retrieves the 'Prediction' from TensorFlow and and copies to a column
                .Append(_mlContext.Transforms.CopyColumns("Prediction", "Prediction/Softmax"));

            // Create an executable model from the estimator pipeline
            IDataView dataView = _mlContext.Data.LoadFromEnumerable(new List<InputData>());
            _model = pipeline.Fit(dataView);
        }

        public SentimentPrediction PredictSentiment(string inputText)
        {
            var engine = _mlContext.Model.CreatePredictionEngine<InputData, SentimentPrediction>(_model);

            var review = new InputData()
            {
                Text = inputText
            };

            // Predict with TensorFlow pipeline.
            var sentimentPrediction = engine.Predict(review);
            return sentimentPrediction;
        }
    }
}
